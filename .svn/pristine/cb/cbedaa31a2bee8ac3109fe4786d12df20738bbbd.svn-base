/**
 * @description This class makes selected elements draggable by mouse.
 * @class dny.Draggable
 * @names dny
 * @namespace
 * @author 
 * @version 1.0.0
 * @since January 31, 2012
 * @extends jindo.UIComponent
 * @copyright Copyright (c) 2012, NHN Technology Services inc.
 * @generated by Jindo2 Code Generator v1.0.3
 * @sample
 * <div id="custom_id">drag me</div>
 * var oDraggable = new dny.Draggable("custom_id");
 */
dny.Draggable = jindo.$Class({
	/** @lends dny.Draggable.prototype */

	/**
     * @description Draggable element 
	 * @private
	 * @type Wrapping Element
	 */
	_welDraggable : null,
	/**
	 * @description Cloned draggable element
	 * @private
	 * @type Wrapping Element
	 */
	_welClonedDraggable : null,
	/**
     * @description Function for mousedown 
	 * @private
	 * @type Wrapping Function
	 */
	_wfOnMouseDown : null,
	/**
     * @description Function for mousemove 
	 * @private
	 * @type Wrapping Function
	 */
	_wfOnMouseMove : null,
	/**
     * @description Function for mouseup 
	 * @private
	 * @type Wrapping Function
	 */
	_wfOnMouseUp : null,
	/**
     * @description Function for window resize
	 * @private
	 * @type Wrapping Function
	 */
	_wfOnWindowResize : null,
	/**
	 * @description Gap X between draggable element and mouse position
	 * @private
	 * @type Number
	 */
	_nGapX : null,
	/**
	 * @description  Gap Y between draggable element and mouse position
	 * @private
	 * @type Number
	 */
	_nGapY : null,
	/**
	 * @description Window size(width, height)
	 * @private
	 * @type Array
	 */
	_aWindowSize : null,

	/**
     * @description $init.
	 * @public
	 * @constructs
	 * @param {String} sDraggableElementName
	 */
	$init : function(sDraggableElementName) {
		if(typeof(sDraggableElementName) == "string"){
			this._welDraggable = jindo.$Element(sDraggableElementName).css({cursor:"pointer"});
		}else if(typeof(sDraggableElementName) == "object"){
			this._welDraggable = jindo.$Element(sDraggableElementName).css({cursor:"pointer"});
		}else{
			return null;
		}
		this._adjustWindowSize();
		this._wfOnMouseDown = jindo.$Fn(this._onMouseDown, this);
		this._wfOnMouseMove = jindo.$Fn(this._onMouseMove, this);
		this._wfOnMouseUp = jindo.$Fn(this._onMouseUp, this);
		this._wfOnWindowResize = jindo.$Fn(this._adjustWindowSize, this);
		this.activate();
	},

	/**
     * @description On activate.
	 * @private
	 */
	_onActivate : function() {
		this._wfOnWindowResize.attach(window, "resize");
		this._wfOnMouseDown.attach(this._welDraggable, "mousedown");
	},

	/**
     * @description On deactivate.
	 * @private
	 */
	_onDeactivate : function() {
		this._wfOnWindowResize.detach(window, "resize");
		this._wfOnMouseDown.detach(this._welDraggable, "mousedown");
	},

	/**
     * @description On mouse down.
	 * @private
	 * @param {Wrapping Event} we
	 */
	_onMouseDown : function(we) {
		we.stopBubble();
		if(jindo.$Agent().navigator().ie){
			we.element.setCapture();	// for IE
		}
		var oPos = we.pos();
		this._calculateGapBetweenElementAndMouse(oPos.clientX, oPos.clientY);
		this._cloneDraggableElement();
		this._wfOnMouseMove.attach(document, "mousemove");
		this._wfOnMouseMove.attach(document, "mousewheel");
		this._wfOnMouseUp.attach(document, "mouseup");
		this.fireEvent("dragStart", {
			aMousePosition : we.pos(),
			welDraggable : this._welDraggable,
			welClonedDraggable : this._welClonedDraggable
		});
	},

	/**
     * @description On mouse move.
	 * @private
	 * @param {Wrapping Event} we
	 */
	_onMouseMove : function(we) {
		we.stopBubble();
		var oPos = we.pos();
		var nX = parseInt(oPos.pageX, 10) - this._nGapX;
		var nY = parseInt(oPos.pageY, 10) - this._nGapY;
		this._setClonedDraggableElementsPosition(nX, nY);
		
		this.fireEvent("dragging", {
			aMousePosition : we.pos(),
			welDraggable : this._welDraggable,
			welClonedDraggable : this._welClonedDraggable
		});		
	},

	/**
     * @description On mouse up.
	 * @private
	 * @param {Wrapping Event} we
	 */
	_onMouseUp : function(we) {
		we.stopBubble();
		if(jindo.$Agent().navigator().ie){
			we.element.releaseCapture ();	// for IE
		}		
		this._removeClonedDraggableElement();
		this._wfOnMouseMove.detach(document, "mousemove");
		this._wfOnMouseMove.detach(document, "mousewheel");
		this._wfOnMouseUp.detach(document, "mouseup");
		this.fireEvent("dragEnd", {
			aMousePosition : we.pos(),
			welDraggable : this._welDraggable,
			welClonedDraggable : this._welClonedDraggable
		});
	},
	
	/**
	 * @description Clone draggable element
	 * @private
	 */
	_cloneDraggableElement : function() {
		this._welClonedDraggable = jindo.$Element(this._welDraggable.$value().cloneNode(true));
		this._welClonedDraggable.css({zIndex:9999, position:"absolute"});
		this._welDraggable.after(this._welClonedDraggable);
		this._welClonedDraggable.offset(this._welDraggable.offset().top, this._welDraggable.offset().left);
	},
	
	/**
	 * @description Remove cloned draggable element
	 * @private
	 */
	_removeClonedDraggableElement : function() {
		this._welClonedDraggable.leave();
		this._welClonedDraggable = null;
	},
	
	/**
	 * @description Calculate gap between element and mouse
	 * @private
	 * @param {Number} nX
	 * @param {Number} nY
	 */
	_calculateGapBetweenElementAndMouse : function(nX, nY) {
		var htOffset = this._welDraggable.offset();
		this._nGapX = parseInt(nX, 10) - parseInt(htOffset.left, 10);
		this._nGapY = parseInt(nY, 10) - parseInt(htOffset.top, 10);
	},
	
	/**
	 * @description Set cloned draggable element's position
	 * @param {Number} nX
	 * @param {Number} nY
	 */
	_setClonedDraggableElementsPosition : function(nX, nY) {
		this._welClonedDraggable.offset((nY - jindo.$Document().scrollPosition().top), nX);
	},

	/**
     * @description Adjust window size.
	 * @private
	 * @param {Wrapping Event} we
	 */
	_adjustWindowSize : function(we) {
		this._aWindowSize = jindo.$Document(document).clientSize();
	},
	
	/**
	 * @description Get draggable element
	 * @returns {Wrapping Element}
	 */
	getDraggableElement : function() {
		return this._welDraggable;
	},
	
	/**
	 * @description Get cloned draggable element
	 * @returns {Wrapping Element}
	 */
	getClonedDraggableElement : function() {
		return this._welClonedDraggable;
	}
	
}).extend(jindo.UIComponent);

