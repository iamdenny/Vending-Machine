/**
 * @description 
 * @class dny.VendingMachine
 * @names dny
 * @namespace
 * @author 
 * @version 1.0.0
 * @since February 13, 2012
 * @copyright Copyright (c) 2012, NHN Technology Services inc.
 * @generated by Jindo2 Code Generator v1.0.3
 */
dny.VendingMachine = jindo.$Class({
	/** @lends dny.VendingMachine.prototype */

	/**
     * @description Beverage inventory model.
	 * @private
	 * @type Wrapping Array of Wrapping Object
	 */
	_wawoBeverageInventoryModel : null,
	/**
     * @description Earned money bag model. 
	 * @private
	 * @type Wrapping Object
	 */
	_woEarnedMoneyBagModel : null,
	/**
     * @description Current inserted money bag model.
	 * @private
	 * @type Wrapping Object
	 */
	_woCurrentInsertedMoneyBagModel : null,
	/**
     * @description Change money bag model.
	 * @private
	 * @type Wrapping Object
	 */
	_woChangeMoneyBagModel : null,
	/**
     * @description My money bag model.
	 * @private
	 * @type Wrapping Object
	 */
	_woMyMoneyBagModel : null,
	/**
     * @description View.
	 * @private
	 * @type Wrapping Object
	 */
	_woView : null,

	/**
     * @description $init.
	 * @public
	 * @constructs
	 * @param {String} sElementName
	 */
	$init : function(sElementName) {
		this._initModels();
		this._initView(sElementName);
	},

	/**
     * @description Init models.
	 * @private
	 */
	_initModels : function() {
		this._wawoBeverageInventoryModel = jindo.$A();

		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("펩시", 300,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("V12", 200,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("칸타타", 700,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("2%", 500,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("환타", 800,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("식혜", 100,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("비타500", 400,  dny.randomRange(1,10)));
		this._wawoBeverageInventoryModel.push(new dny.VendingMachine.BeverageInventoryModel("박카스D", 600,  dny.randomRange(1,10)));
		
		this._woEarnedMoneyBagModel = new dny.VendingMachine.EarnedMoneyBagModel();
		this._woCurrentInsertedMoneyBagModel = new dny.VendingMachine.CurrentInsertedMoneyBagModel(3000, 2);
		this._woChangeMoneyBagModel = new dny.VendingMachine.ChangeMoneyBagModel();
		this._woMyMoneyBagModel = new dny.VendingMachine.MyMoneyBagModel(9000);
	},

	/**
     * @description Init view.
	 * @private
	 */
	_initView : function(sElementName) {
		var _self = this;
		this._woView = new dny.VendingMachine.View(sElementName, this._woMyMoneyBagModel.getCurrentMoney()).attach({
			cashInserted : function(oCustomEvent) {
				_self._spendMoney(oCustomEvent.nValue);
			},
			cashDropped : function(oCustomEvent) {
				_self._dropMoney(oCustomEvent.nValue);
			},
			returnButtonClicked : function(oCustomEvent) {
				_self._returnMoney();
			},
			beverageClicked : function(oCustomEvent) {
				_self._dispenseBeverage(oCustomEvent.nIndex);
			}
		});
		
		for(var i=0; i<this._wawoBeverageInventoryModel.length(); i++){
			this._woView.setBeverageInventorySoldOut(i, false);
		}
	},
	
	/**
	 * @description Spend money.
	 * @private
	 * @param {Number} nMoney
	 */
	_spendMoney : function(nMoney){
		var _woMyMoneyBagModel = this._woMyMoneyBagModel;
		var _woCurrentInsertedMoneyBagModel = this._woCurrentInsertedMoneyBagModel;

		// check max money
		if(_woCurrentInsertedMoneyBagModel.isMaxInsertedMoneyWith(nMoney)){
			this._woView.logToConsole("최대 입금 가능 금액은 " + dny.numberFormat(_woCurrentInsertedMoneyBagModel.getMaxInsertedMoney()) + "원 입니다.")
			return null;
		}
		
		// check max paper money
		var bIsPaper = (nMoney == 1000) ? true : false;
		if(bIsPaper){
			if(_woCurrentInsertedMoneyBagModel.isMaxCountOfThousandWon()){
				this._woView.logToConsole("지폐는 한번에 최대" + _woCurrentInsertedMoneyBagModel.getMaxThousandWonCount() + "장까지 투입 가능합니다.")
				return null;
			}
		}
		
		// insert money
		_woMyMoneyBagModel.spendMoney(nMoney);
		_woCurrentInsertedMoneyBagModel.receiveCash(new dny.VendingMachine.CashEntity(nMoney, bIsPaper));
		
		// display
		this._woView.setMyMoney(_woMyMoneyBagModel.getCurrentMoney());
		this._woView.setCurrentInsertedMoney(_woCurrentInsertedMoneyBagModel.getCurrentMoney());
		
		// console
		this._woView.logToConsole(dny.numberFormat(nMoney) + "원이 투입 되었습니다.");
	},
	
	/**
	 * @description Drop money.
	 * @private
	 * @param {Number} nMoney
	 */
	_dropMoney : function(nMoney){
		this._woMyMoneyBagModel.spendMoney(nMoney);
		this._woView.setMyMoney(this._woMyMoneyBagModel.getCurrentMoney());
		
		// console
		this._woView.logToConsole(dny.numberFormat(nMoney) + "원을 떨어뜨렸습니다.");
	},
	
	/**
	 * @description Return money.
	 * @private
	 */
	_returnMoney : function() {
		var _wawoCashEntity = null;
		var _woCurrentInsertedMoneyBagModel = this._woCurrentInsertedMoneyBagModel;
		var _nCurrentMoney = _woCurrentInsertedMoneyBagModel.getCurrentMoney();
		if(_nCurrentMoney == 0){
			this._woView.logToConsole("반환할 금액이 없습니다.");
			return null;
		}
		
		if(_woCurrentInsertedMoneyBagModel.isFlushed()){
			_wawoCashEntity = _woCurrentInsertedMoneyBagModel.flushCash();
		}else{
			_woCurrentInsertedMoneyBagModel.flushCash();
			_wawoCashEntity = this._woChangeMoneyBagModel.returnCash(_nCurrentMoney);
		}
		this._woMyMoneyBagModel.getMoneyBack(_nCurrentMoney);
		
		// display
		this._woView.setCurrentInsertedMoney(_woCurrentInsertedMoneyBagModel.getCurrentMoney());
		this._woView.setMyMoney(this._woMyMoneyBagModel.getCurrentMoney());
		this._woView.returnMoney(_wawoCashEntity);
		this._woView.logToConsole(dny.numberFormat(_nCurrentMoney) + "원을 반환 하였습니다.");
	},
	
	/**
	 * @description Dispense beverage.
	 * @param {Number} nIndex
	 */
	_dispenseBeverage : function(nIndex) {
		// check current money
		var _woBeverageInventoryModel = this._wawoBeverageInventoryModel.get(nIndex);
		var _sProductName = _woBeverageInventoryModel.getProductName();
		var _nSellPrice = _woBeverageInventoryModel.getSellPrice();
		var _nCurrentMoney = this._woCurrentInsertedMoneyBagModel.getCurrentMoney();
		if(_nCurrentMoney >= _woBeverageInventoryModel.getSellPrice()){
			var _bIsBeverage = _woBeverageInventoryModel.dispenseBeverage();
			if(_bIsBeverage){
				var _wawoEarnedCashEntity = this._woCurrentInsertedMoneyBagModel.spendMoney(_nSellPrice);
				this._woEarnedMoneyBagModel.earnCash(_wawoEarnedCashEntity);
				this._woView.setCurrentInsertedMoney(this._woCurrentInsertedMoneyBagModel.getCurrentMoney());
				if(_woBeverageInventoryModel.isEmpty()){
					this._woView.setBeverageInventorySoldOut(nIndex, true);
				}
				this._woView.logToConsole(_sProductName + "이(가) 나왔습니다.");
			}else{
				this._woView.logToConsole(_sProductName + "은(는) 임시품절입니다.");
			}
		}else{
			var _nLackMoney = _nSellPrice - _nCurrentMoney;
			this._woView.logToConsole(_sProductName + "을 구매하기 위해서는 " + dny.numberFormat(_nLackMoney) + "원 부족합니다.");
		}
	}

});

